{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"santos-luis.github.io"}},"allMarkdownRemark":{"nodes":[{"excerpt":"Why Serverless? In multiple past posts I talked about why the serverless approach was good to the use case in question, but I never really…","fields":{"slug":"/promo-codes/"},"frontmatter":{"date":"May 05, 2020","title":"Promo Codes","description":"Service that consist of multiple APIs made to be used as a backend for a promo codes service. Currently allows creation, update, and validation of promo codes. It's build on NodeJS using an AWS lambda, API gateway and Aurora as database (on AWS RDS).","technologies":"NodeJS, AWS Lambda, API Gateway, Aurora DB, Serverless"}},{"excerpt":"The frontends of this life Besides of bugs and new features/improvements in pre-existent projects, I never actually did anything major…","fields":{"slug":"/static-pages/"},"frontmatter":{"date":"January 14, 2020","title":"Static Pages","description":"Frontend built using GatsbyJS, which consists on multiple pages of countries and the respective cities, where we can find photos and descriptions of them. It's mostly focused on boosting SEO while allowing quick editing and deployment. In terms of hosting, uses AWS S3 + Cloudfront + Route53.","technologies":"GatsbyJS, AWS S3, Cloudfront, Route53"}},{"excerpt":"A bit of context One of the thing that you need to define, while selling stuff on a marketplace, is the price. It can be hard to came up…","fields":{"slug":"/price-recommendations/"},"frontmatter":{"date":"August 24, 2019","title":"Price Recommendations","description":"Used as a backend to a recommendation price system. The project is based on an NodeJS AWS lambda which receives parameters and returns a price value. This price is updated multiple times a year using a python scraper that fetch information from a crowd-sourced global database of reported consumer prices, and then has some business logic on top of those results. The final results are then store on a DyanmoDB table and serve has response for the API.","technologies":"NodeJS, Python, AWS Lambda, API Gateway, DynamoDB, Serverless"}},{"excerpt":"The Problem: While working at an online marketplace, one of the challenges encountered are the detection of frauds. Those frauds can…","fields":{"slug":"/fraud-detection/"},"frontmatter":{"date":"April 08, 2019","title":"Fraud Detection","description":"The project was developed using Symfony and an AWS lambda, having the purpose of detecting phone numbers/emails in photos. To get the text present on the image, we were doing OCR (optical character recognition) using the google cloud vision API and doing some logic to filter the patterns on the text. In terms of deployment process the project is using the serverless framework.","technologies":"Symfony, AWS Lambda, Google Cloud Vision API, Serverless"}}]}},"pageContext":{}},"staticQueryHashes":["3000541721","521915702"]}